// Generated by CoffeeScript 1.4.0
(function() {
  var VCalendar, VEvent, moment, time, _ref;

  time = require('time');

  moment = require('moment');

  _ref = require('./index'), VCalendar = _ref.VCalendar, VEvent = _ref.VEvent;

  module.exports = function(compound, Event) {
    Event.prototype.toIcal = function(user, timezone) {
      var endDate, out, startDate;
      startDate = new time.Date(this.start);
      endDate = new time.Date(this.end);
      startDate.setTimezone(timezone, false);
      endDate.setTimezone(timezone, false);
      out = new VEvent(startDate, endDate, this.description, this.place);
      out.fields['UID'] = this.id;
      return out;
    };
    Event.fromIcal = function(vevent) {
      var description, endDate, event, startDate;
      event = new Event();
      description = vevent.fields["DESCRIPTION"];
      if (description == null) {
        description = vevent.fields["SUMMARY"];
      }
      event.description = description;
      event.place = vevent.fields["LOCATION"];
      startDate = vevent.fields["DTSTART"];
      startDate = moment(startDate, "YYYYMMDDTHHmm00");
      startDate = new time.Date(new Date(startDate), 'UTC');
      endDate = vevent.fields["DTEND"];
      endDate = moment(endDate, "YYYYMMDDTHHmm00");
      endDate = new time.Date(new Date(endDate), 'UTC');
      event.start = startDate.toString().slice(0, 24);
      event.end = endDate.toString().slice(0, 24);
      return event;
    };
    return Event.extractEvents = function(component) {
      var events, walker;
      events = [];
      walker = function(component) {
        var subComponent, _i, _len, _ref1, _ref2, _results;
        if (component.name === 'VEVENT') {
          events.push(Event.fromIcal(component));
        }
        if (((_ref1 = component.subComponents) != null ? _ref1.length : void 0) !== 0) {
          _ref2 = component.subComponents;
          _results = [];
          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
            subComponent = _ref2[_i];
            _results.push(walker(subComponent));
          }
          return _results;
        }
      };
      walker(component);
      return events;
    };
  };

}).call(this);
