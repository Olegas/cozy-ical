// Generated by CoffeeScript 1.6.3
(function() {
  var moment, time;

  time = require('time');

  moment = require('moment');

  module.exports = function(Event) {
    var VCalendar, VEvent, _ref;
    _ref = require('./index'), VCalendar = _ref.VCalendar, VEvent = _ref.VEvent;
    Event.prototype.toIcal = function(timezone) {
      var endDate, startDate;
      if (timezone == null) {
        timezone = "UTC";
      }
      startDate = new time.Date(this.start);
      endDate = new time.Date(this.end);
      startDate.setTimezone(timezone, false);
      endDate.setTimezone(timezone, false);
      return new VEvent(startDate, endDate, this.description, this.place, this.id, this.details);
    };
    Event.fromIcal = function(vevent, timezone) {
      var endDate, event, startDate, tz;
      if (timezone == null) {
        timezone = "UTC";
      }
      event = new Event();
      event.description = vevent.fields["SUMMARY"] || vevent.fields["DESCRIPTION"];
      event.details = vevent.fields["DESCRIPTION"] || vevent.fields["SUMMARY"];
      if (event.description == null) {
        event.description = event.details;
      }
      event.place = vevent.fields["LOCATION"];
      startDate = vevent.fields["DTSTART"];
      startDate = moment(startDate, "YYYYMMDDTHHmm00Z");
      if (!startDate._isUTC) {
        tz = vevent.fields["DTSTART-TZID"] || timezone;
        startDate = new time.Date(startDate, tz);
        startDate.setTimezone('UTC');
      }
      endDate = vevent.fields["DTEND"];
      endDate = moment(endDate, "YYYYMMDDTHHmm00Z");
      if (!endDate._isUTC) {
        tz = vevent.fields["DTEND-TZID"] || timezone;
        endDate = new time.Date(endDate, tz);
        endDate.setTimezone('UTC');
      }
      event.start = startDate.toString().slice(0, 24);
      event.end = endDate.toString().slice(0, 24);
      return event;
    };
    return Event.extractEvents = function(component, timezone) {
      var events;
      events = [];
      component.walk(function(component) {
        if (component.name === 'VEVENT') {
          return events.push(Event.fromIcal(component, timezone));
        }
      });
      return events;
    };
  };

}).call(this);
