// Generated by CoffeeScript 1.4.0
(function() {
  var VAlarm, VCalendar, VDaylight, VStandard, VTimezone, VTodo, moment, time, _ref;

  time = require('time');

  moment = require('moment');

  _ref = require('./index'), VCalendar = _ref.VCalendar, VTodo = _ref.VTodo, VAlarm = _ref.VAlarm, VTimezone = _ref.VTimezone, VStandard = _ref.VStandard, VDaylight = _ref.VDaylight;

  module.exports = function(Alarm) {
    Alarm.getICalCalendar = function() {
      var calendar;
      return calendar = new VCalendar('Cozy Cloud', 'Cozy Agenda');
    };
    Alarm.prototype.timezoneToIcal = function() {
      var date, vtimezone;
      date = new time.Date(this.trigg);
      vtimezone = new VTimezone(date, this.timezone);
      return vtimezone;
    };
    Alarm.prototype.toIcal = function(user, timezone) {
      var date, vtodo;
      date = new time.Date(this.trigg);
      date.setTimezone(timezone, false);
      vtodo = new VTodo(date, user, this.description);
      vtodo.addAlarm(date);
      vtodo.fields['UID'] = this.id;
      return vtodo;
    };
    Alarm.fromIcal = function(valarm, timezone) {
      var alarm, date, triggerDate;
      alarm = new Alarm();
      alarm.description = valarm.fields["SUMMARY"];
      date = valarm.fields["DTSTAMP"];
      date = moment(date, "YYYYMMDDTHHmm00");
      triggerDate = new time.Date(new Date(date), 'UTC');
      if (timezone != null) {
        alarm.timezone = timezone;
        triggerDate.setTimezone(timezone);
      }
      alarm.trigg = triggerDate.toString().slice(0, 24);
      return alarm;
    };
    Alarm.fromIcalTimezone = function(vtimezone) {
      return vtimezone.fields["TZID"];
    };
    return Alarm.extractAlarms = function(component, timezone) {
      var alarms, walker;
      alarms = [];
      walker = function(component) {
        var subComponent, _i, _len, _ref1, _ref2, _results;
        if (component.name === 'VTIMEZONE') {
          timezone = Alarm.fromIcalTimezone(component);
        }
        if (component.name === 'VTODO') {
          alarms.push(Alarm.fromIcal(component, timezone));
        }
        if (((_ref1 = component.subComponents) != null ? _ref1.length : void 0) !== 0) {
          _ref2 = component.subComponents;
          _results = [];
          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
            subComponent = _ref2[_i];
            _results.push(walker(subComponent));
          }
          return _results;
        }
      };
      walker(component);
      return alarms;
    };
  };

}).call(this);
